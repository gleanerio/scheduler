networks:
  traefik_proxy:
    external: true
  headless:
    external: true
    name: ${GLEANERIO_HEADLESS_NETWORK:-headless_gleanerio}
  dagster_host:
    driver: overlay
    # using project name is a bit tricky from dagster code, and needs to be external for a
    # container to use them
    #name: dagster-${PROJECT:-eco}
    name: dagster_host
    attachable: true
volumes:
  dagster-postgres:
        driver: local
# external so it could be shared accross docker swarms
configs:
  gleaner:
    name: ${GLEANERIO_GLEANER_DOCKER_CONFIG:-gleaner}
    external: true
  nabu:
    name: ${GLEANERIO_NABU_DOCKER_CONFIG:-nabu}
    external: true
  workspace:
    name: ${GLEANERIO_WORKSPACE_DOCKER_CONFIG:-workspace}
    external: true

secrets:
  MINIO_ROOT_ACCESS_KEY:
    external: true
  MINIO_ROOT_SECRET_KEY:
    external: true
services:
    dagster-dagit:
        image: nsfearthcube/dagster-gleanerio:${CONTAINER_DAGSTER_TAG:-latest}
        command:
          - "dagster-webserver"
          - "-w"
          - "${GLEANERIO_WORKSPACE_CONFIG_PATH:-/usr/src/app/workspace.yaml}"
          - "-h"
          - "0.0.0.0"
          - "-p"
          - "3000"
        configs: &configs
          - source: workspace
            target: /usr/src/app/workspace.yaml
            # uid: "103"
            # gid: "103"
            mode:
              0444
          - source: gleaner
            target: /scheduler/gleanerconfig.yaml
            mode:
                044
          - source: nabu
            target: /scheduler/nabuconfig.yaml
            # uid: "103"
            # gid: "103"
            mode:
              044
        secrets:
          - MINIO_ROOT_ACCESS_KEY
          - MINIO_ROOT_SECRET_KEY
            # GLEANEERIO_  the environment variables for this stack, passed into containers
            # the variables passed into the containers varies due to inconsistent standards.
            # this there are prefixed by project aka ECRR_ for customization
          # DO NOT RENAME THE FIRST PART, aka the container environment variable,
          #     unless you sure what you are doing
        environment: &env
            - DEBUG=${DEBUG:-false}
            - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
            - PORTAINER_URL=${PORTAINER_URL}
            - PORTAINER_KEY=${PORTAINER_KEY}
            - GLEANERIO_GLEANER_IMAGE=${GLEANERIO_GLEANER_IMAGE}
            - GLEANERIO_NABU_IMAGE=${GLEANERIO_NABU_IMAGE}
            - GLEANERIO_LOG_PREFIX=${GLEANERIO_LOG_PREFIX}
            - GLEANERIO_MINIO_ADDRESS=${GLEANERIO_MINIO_ADDRESS}
            - GLEANERIO_MINIO_PORT=${GLEANERIO_MINIO_PORT}
            - GLEANERIO_MINIO_USE_SSL=${GLEANERIO_MINIO_USE_SSL}
            - GLEANERIO_MINIO_BUCKET=${GLEANERIO_MINIO_BUCKET}
            - GLEANERIO_MINIO_ACCESS_KEY=${GLEANERIO_MINIO_ACCESS_KEY}
            - GLEANERIO_MINIO_SECRET_KEY=${GLEANERIO_MINIO_SECRET_KEY}
            - GLEANERIO_HEADLESS_ENDPOINT=${GLEANERIO_HEADLESS_ENDPOINT}
            - GLEANERIO_HEADLESS_NETWORK=${GLEANERIO_HEADLESS_NETWORK}
            - GLEANERIO_GRAPH_URL=${GLEANERIO_GRAPH_URL}
            - GLEANERIO_GRAPH_NAMESPACE=${GLEANERIO_GRAPH_NAMESPACE}
            - GLEANERIO_NABU_CONFIG_PATH=${GLEANERIO_NABU_CONFIG_PATH:-/configs/gleaner/nabuconfig.yaml}
            - GLEANERIO_GLEANER_CONFIG_PATH=${GLEANERIO_GLEANER_CONFIG_PATH:-/configs/gleaner/gleanerconfig.yaml}
            - GLEANERIO_NABU_DOCKER_CONFIG=${GLEANERIO_NABU_DOCKER_CONFIG:-nabu}
            - GLEANERIO_GLEANER_DOCKER_CONFIG=${GLEANERIO_GLEANER_DOCKER_CONFIG:-gleaner}
            - GLEANERIO_SUMMARY_GRAPH_ENDPOINT=${GLEANERIO_SUMMARY_GRAPH_ENDPOINT}
            - GLEANERIO_SUMMARY_GRAPH_NAMESPACE=${GLEANERIO_SUMMARY_GRAPH_NAMESPACE}
            - GLEANERIO_DATAGRAPH_ENDPOINT=${GLEANERIO_DATAGRAPH_ENDPOINT}
            - GLEANERIO_PROVGRAPH_ENDPOINT=${GLEANERIO_PROVGRAPH_ENDPOINT}
#            - GLEANER_MINIO_KEY=/run/secrets/MINIO_ROOT_ACCESS_KEY
#            - GLEANER_MINIO_SECRET=/run/secrets/MINIO_ROOT_SECRET_KEY

        ports:
            - 3000:3000
        networks:
          - traefik_proxy
          - dagster_host
        depends_on:
            - dagster-postgres
        labels:
              - "traefik.enable=true"
              - "traefik.http.routers.sched-${PROJECT:-eco}.entrypoints=http"
              - "traefik.http.routers.sched-${PROJECT:-eco}.priority=13"
              - "traefik.http.routers.sched-${PROJECT:-eco}.rule=Host(`sched.${HOST? HOST is required}`)"
              - "traefik.http.middlewares.sched-https-redirect.redirectscheme.scheme=https"
              - "traefik.http.routers.sched-${PROJECT:-eco}.middlewares=sched-https-redirect"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.entrypoints=https"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.priority=12"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.rule=Host(`sched.${HOST? HOST is required}`)"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.tls=true"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.tls.certresolver=httpresolver"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.service=sched-${PROJECT}"
              - "traefik.http.services.sched-${PROJECT:-eco}.loadbalancer.server.port=3000"
              - "traefik.docker.network=traefik_proxy"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.accesscontrolallowmethods=GET,OPTIONS,POST"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.accesscontrolalloworigin=*"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.accesscontrolmaxage=100"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.addvaryheader=true"
    dagster-daemon:
        image: nsfearthcube/dagster-gleanerio:${CONTAINER_DAGSTER_TAG:-latest}
        configs: *configs

        secrets:
          - MINIO_ROOT_ACCESS_KEY
          - MINIO_ROOT_SECRET_KEY
        environment: *env

        command:
           - "dagster-daemon"
           - "run"
           - "-w"
           - "${GLEANERIO_WORKSPACE_CONFIG_PATH:-/usr/src/app/workspace.yaml}"
        depends_on:
            - dagster-postgres
        networks:
            - dagster_host
    dagster-postgres:
        image: postgres:13.3
        ports:
            - 5432:5432
        environment:
            - POSTGRES_PASSWORD=secret
        volumes:
            - dagster-postgres:/var/lib/postgresql/data
        networks:
           - dagster_host
    headless:
      # image: chromedp/headless-shell:stable
      # stable after 105 causes "devtool: CreateURL: Using unsafe HTTP verb GET to invoke /json/new. This action supports only PUT verb.",
      image: chromedp/headless-shell:105.0.5195.127
      #    build:
  #      context: .
  #      shm_size: "2gb"
      restart: unless-stopped
      shm_size: 1gb
      labels:
        -  "traefik.enable=false"
        - "traefik.backend=headlesschrome"
        - "traefik.port=9222"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.entrypoints=http"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.priority=13"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.rule=Host(`headlesschrome.${HOST? HOST is required}`)"
        - "traefik.http.middlewares.headlesschrome-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.middlewares=sched-https-redirect"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.entrypoints=https"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.priority=12"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.rule=Host(`headlesschrome.${HOST? HOST is required}`)"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.tls=true"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.tls.certresolver=httpresolver"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.service=headlesschrome-${PROJECT}"
        - "traefik.http.services.sched-${PROJECT:-eco}.loadbalancer.server.port=9222"
        - "traefik.docker.network=traefik_proxy"
      ports:
        - 9222:9222
      environment:
        - SERVICE_PORTS=9222
        # method to get a bigger shm space, since shm_size does not work on a swarm
      tmpfs:
        - /tmp:size=512M
      volumes:
        - type: tmpfs
          target: /dev/shm

      # adding the "bridge" network does not work to give access to the 'gleaner and nabu' containers started
      # by this process. There is no name resolution on that network.
      networks:
        - dagster_host
        - headless
        # in code, use names defined in network above

    dagster-code-tasks:
        # you should be able to change the source locally, without a full rebuild.
       #image: dagster-${PROJECT:-eco}:latest
        image: nsfearthcube/dagster-gleanerio

        environment: *env
        command:
        - "dagster"
        - "api"
        - "grpc"
        - "-h"
        - "0.0.0.0"
        - "-p"
        - "4000"
        - "-m"
        - "workflows.tasks.tasks"
        - "-d"
        - "/usr/src/app/"

       # volumes: *vol
        depends_on:
            - dagster-postgres
        networks:
            - dagster_host
    dagster-code-project:
        # you should be able to change the source locally, without a full rebuild.
       #image: dagster-${PROJECT:-eco}:latest
        image: nsfearthcube/dagster-gleanerio-${PROJECT:-eco}:${CONTAINER_CODE_TAG:-latest}
        environment: *env
        command:
        - "dagster"
        - "api"
        - "grpc"
        - "-h"
        - "0.0.0.0"
        - "-p"
        - "4000"
        - "--python-file"
        - "/usr/src/app/project/eco/repositories/repository.py"
        - "-d"
        - "/usr/src/app/project/eco/"
        depends_on:
            - dagster-postgres
        networks:
            - dagster_host