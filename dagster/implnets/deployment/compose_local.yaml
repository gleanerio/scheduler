version: "3.9"

# networks: production uses traefik_proxy, buth
#  this is local testing
networks:
  traefik_proxy:
  #  driver: bridge
  headless:
    external: true
    name: ${GLEANER_HEADLESS_NETWORK:-headless_gleanerio}
volumes:
    dagster-postgres:
        driver: local

# let yourself use local configuration
configs:
  gleaner:
    name: ${GLEANER_GLEANER_DOCKER_CONFIG:-gleaner}
    file: ../configs/${PROJECT:-eco}/gleanerconfig.yaml
  nabu:
    name: ${GLEANER_NABU_DOCKER_CONFIG:-nabu}
    file: ../configs/${PROJECT:-eco}/nabuconfig.yaml

# DO NOT START IN PYCHARM (unless you set the env variables in your runconfig
# USE:
# ./docker_localstart.sh
services:
    dagster-dagit:
        platform: linux/x86_64
        build:
          #context: .
          context: ..
          dockerfile: build/Dockerfile_local
          args:
            implnet: ${PROJECT:-eco}
        # you should be able to change the source locally, without a full rebuild.
        #image: dagster-${PROJECT:-eco}:latest
        image: dagster-gleanerio-local:latest
        volumes: &vol
          - ../dagster.yaml:/usr/src/app/dagster.yaml
          - ../generatedCode/implnet-${PROJECT:-eco}/output/:/usr/src/app/output
        environment: &env
            - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
            - PORTAINER_URL=${PORTAINER_URL}
            - PORTAINER_KEY=${PORTAINER_KEY}
            - GLEANERIO_GLEANER_IMAGE=${GLEANERIO_GLEANER_IMAGE}
            - GLEANERIO_GLEANER_ARCHIVE_OBJECT=${GLEANERIO_GLEANER_ARCHIVE_OBJECT}
            - GLEANERIO_GLEANER_ARCHIVE_PATH=${GLEANERIO_GLEANER_ARCHIVE_PATH}
            - GLEANERIO_NABU_IMAGE=${GLEANERIO_NABU_IMAGE}
            - GLEANERIO_NABU_ARCHIVE_OBJECT=${GLEANERIO_NABU_ARCHIVE_OBJECT}
            - GLEANERIO_NABU_ARCHIVE_PATH=${GLEANERIO_NABU_ARCHIVE_PATH}
            - GLEANERIO_LOG_PREFIX=${GLEANERIO_LOG_PREFIX}
            - GLEANER_MINIO_ADDRESS=${GLEANER_MINIO_ADDRESS}
            - GLEANER_MINIO_PORT=${GLEANER_MINIO_PORT}
            - GLEANER_MINIO_USE_SSL=${GLEANER_MINIO_USE_SSL}
            - GLEANER_MINIO_BUCKET=${GLEANER_MINIO_BUCKET}
            - GLEANER_MINIO_ACCESS_KEY=${GLEANER_MINIO_ACCESS_KEY}
            - GLEANER_MINIO_SECRET_KEY=${GLEANER_MINIO_SECRET_KEY}
            - GLEANER_HEADLESS_ENDPOINT=${GLEANER_HEADLESS_ENDPOINT}
            - GLEANER_HEADLESS_NETWORK=${GLEANER_HEADLESS_NETWORK}
            - GLEANER_GRAPH_URL=${GLEANER_GRAPH_URL}
            - GLEANER_GRAPH_NAMESPACE=${GLEANER_GRAPH_NAMESPACE}
            - GLEANERIO_NABU_CONFIG_PATH=${GLEANERIO_NABU_CONFIG_PATH:-/configs/gleaner/nabuconfig.yaml}
            - GLEANERIO_GLEANER_CONFIG_PATH=${GLEANERIO_GLEANER_CONFIG_PATH:-/configs/gleaner/gleanerconfig.yaml}

        ports:
            - 3000:3000
        networks:
          - traefik_proxy
        depends_on:
            - dagster-postgres
        labels:
              - "traefik.enable=true"
              - "traefik.http.routers.sched.entrypoints=http"
              - "traefik.http.routers.sched.priority=13"
              - "traefik.http.routers.sched.rule=Host(`localhost`)"
              - "traefik.http.middlewares.sched-https-redirect.redirectscheme.scheme=https"
              - "traefik.http.routers.sched.middlewares=sched-https-redirect"
              - "traefik.http.routers.sched-secure.entrypoints=https"
              - "traefik.http.routers.sched-secure.priority=12"
              - "traefik.http.routers.sched-secure.rule=Host(`localhost`)"
              - "traefik.http.routers.sched-secure.tls=true"
              - "traefik.http.routers.sched-secure.tls.certresolver=httpresolver"
              - "traefik.http.routers.sched-secure.service=sched"
              - "traefik.http.services.sched.loadbalancer.server.port=3000"
              - "traefik.docker.network=traefik_proxy"
              - "traefik.http.middlewares.sched.headers.accesscontrolallowmethods=GET,OPTIONS,POST"
              - "traefik.http.middlewares.sched.headers.accesscontrolalloworigin=*"
              - "traefik.http.middlewares.sched.headers.accesscontrolmaxage=100"
              - "traefik.http.middlewares.sched.headers.addvaryheader=true"
    dagster-daemon:
        platform: linux/x86_64
        build:
          #context: .
          context: ..
          dockerfile: build/Dockerfile_local
          args:
            implnet: ${PROJECT:-eco}
        # you should be able to change the source locally, without a full rebuild.
       #image: dagster-${PROJECT:-eco}:latest
        image: dagster-gleanerio-local:latest
        environment: *env
        command: "dagster-daemon run -w ./output/workspace.yaml"
        volumes: *vol
        depends_on:
            - dagster-postgres
        networks:
            - traefik_proxy
    dagster-postgres:
        image: postgres:13.3
        ports:
            - 5432:5432
        environment:
            - POSTGRES_PASSWORD=secret
        volumes:
            - dagster-postgres:/var/lib/postgresql/data
        networks:
           - traefik_proxy
    headless:
      platform: linux/x86_64
      # image: chromedp/headless-shell:stable
      # stable after 105 causes "devtool: CreateURL: Using unsafe HTTP verb GET to invoke /json/new. This action supports only PUT verb.",
      image: chromedp/headless-shell:105.0.5195.127
      #    build:
  #      context: .
  #      shm_size: "2gb"
      restart: unless-stopped
      shm_size: 265mb
      labels:
        -  "traefik.enable=false"
        - "traefik.backend=headlesschrome"
        - "traefik.port=9222"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.entrypoints=http"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.priority=13"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.rule=Host(`headlesschrome.${HOST? HOST is required}`)"
        - "traefik.http.middlewares.headlesschrome-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.middlewares=sched-https-redirect"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.entrypoints=https"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.priority=12"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.rule=Host(`headlesschrome.${HOST? HOST is required}`)"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.tls=true"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.tls.certresolver=httpresolver"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.service=headlesschrome-${PROJECT}"
        - "traefik.http.services.sched-${PROJECT:-eco}.loadbalancer.server.port=9222"
        - "traefik.docker.network=traefik_proxy"
      ports:
        - 9222:9222
      environment:
        - SERVICE_PORTS=9222
        # method to get a bigger shm space, since shm_size does not work on a swarm
      tmpfs:
        - /tmp:size=256M
      volumes:
        - type: tmpfs
          target: /dev/shm

      # adding the "bridge" network does not work to give access to the 'gleaner and nabu' containers started
      # by this process. There is no name resolution on that network.
      networks:
        - traefik_proxy
        - headless
        # in code, use names defined in network above



