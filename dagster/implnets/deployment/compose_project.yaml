version: "3.9"
# this NEEDS
# $HOST
# $PROJECT


# not sure is a named external network works well with traffik, or if the label
#            - "traefik.docker.network=traefik_proxy"
# is even needed if the network is defined.

# secrets not working... these become files, so not really working
networks:
  traefik_proxy:
    external: true
  headless:
    external: true
    name: headless_gleanerio
  dagster_host:
    driver: overlay
    # using project name is a bit tricky from dagster code, and needs to be external for a
    # container to use them
    #name: dagster-${PROJECT:-eco}
    name: dagster_host
    attachable: true
volumes:
  dagster-postgres:
        driver: local
  dagster-project:
    external: true
    #name: dagster-${PROJECT:-eco}
    name: dagster_gleaner_configs
# external so it could be shared accross docker swarms
configs:
  gleaner:
    name: ${GLEANER_GLEANER_DOCKER_CONFIG:-gleaner}
    external: true
  nabu:
    name: ${GLEANER_NABU_DOCKER_CONFIG:-nabu}
    external: true

secrets:
  MINIO_ROOT_ACCESS_KEY:
    external: true
  MINIO_ROOT_SECRET_KEY:
    external: true
services:
    dagster-dagit:
        image: docker.io/nsfearthcube/dagster-${PROJECT:-eco}:${CONTAINER_TAG:-latest}

        secrets:
          - MINIO_ROOT_ACCESS_KEY
          - MINIO_ROOT_SECRET_KEY
        environment: &env
            - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
            - PORTAINER_URL=${PORTAINER_URL}
            - PORTAINER_KEY=${PORTAINER_KEY}
            - GLEANERIO_GLEANER_IMAGE=${GLEANERIO_GLEANER_IMAGE}
            - GLEANERIO_GLEANER_ARCHIVE_OBJECT=${GLEANERIO_GLEANER_ARCHIVE_OBJECT}
            - GLEANERIO_GLEANER_ARCHIVE_PATH=${GLEANERIO_GLEANER_ARCHIVE_PATH}
            - GLEANERIO_NABU_IMAGE=${GLEANERIO_NABU_IMAGE}
            - GLEANERIO_NABU_ARCHIVE_OBJECT=${GLEANERIO_NABU_ARCHIVE_OBJECT}
            - GLEANERIO_NABU_ARCHIVE_PATH=${GLEANERIO_NABU_ARCHIVE_PATH}
            - GLEANERIO_LOG_PREFIX=${GLEANERIO_LOG_PREFIX}
            - GLEANER_MINIO_ADDRESS=${GLEANER_MINIO_ADDRESS}
            - GLEANER_MINIO_PORT=${GLEANER_MINIO_PORT}
            - GLEANER_MINIO_USE_SSL=${GLEANER_MINIO_USE_SSL}
            - GLEANER_MINIO_BUCKET=${GLEANER_MINIO_BUCKET}
            - GLEANER_MINIO_ACCESS_KEY=${GLEANER_MINIO_ACCESS_KEY}
            - GLEANER_MINIO_SECRET_KEY=${GLEANER_MINIO_SECRET_KEY}
            - GLEANER_HEADLESS_ENDPOINT=${GLEANER_HEADLESS_ENDPOINT}
            - GLEANER_HEADLESS_NETWORK=${GLEANER_HEADLESS_NETWORK}
            - GLEANER_GRAPH_URL=${GLEANER_GRAPH_URL}
            - GLEANER_GRAPH_NAMESPACE=${GLEANER_GRAPH_NAMESPACE}
            - GLEANERIO_NABU_CONFIG_PATH=${GLEANERIO_NABU_CONFIG_PATH}
            - GLEANERIO_GLEANER_CONFIG_PATH=${GLEANERIO_GLEANER_CONFIG_PATH}
#            - GLEANER_MINIO_KEY=/run/secrets/MINIO_ROOT_ACCESS_KEY
#            - GLEANER_MINIO_SECRET=/run/secrets/MINIO_ROOT_SECRET_KEY

        ports:
            - 3000:3000
        networks:
          - traefik_proxy
          - dagster_host
        depends_on:
            - dagster-postgres
        labels:
              - "traefik.enable=true"
              - "traefik.http.routers.sched-${PROJECT:-eco}.entrypoints=http"
              - "traefik.http.routers.sched-${PROJECT:-eco}.priority=13"
              - "traefik.http.routers.sched-${PROJECT:-eco}.rule=Host(`sched.${HOST? HOST is required}`)"
              - "traefik.http.middlewares.sched-https-redirect.redirectscheme.scheme=https"
              - "traefik.http.routers.sched-${PROJECT:-eco}.middlewares=sched-https-redirect"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.entrypoints=https"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.priority=12"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.rule=Host(`sched.${HOST? HOST is required}`)"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.tls=true"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.tls.certresolver=httpresolver"
              - "traefik.http.routers.sched-${PROJECT:-eco}-secure.service=sched-${PROJECT}"
              - "traefik.http.services.sched-${PROJECT:-eco}.loadbalancer.server.port=3000"
              - "traefik.docker.network=traefik_proxy"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.accesscontrolallowmethods=GET,OPTIONS,POST"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.accesscontrolalloworigin=*"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.accesscontrolmaxage=100"
              - "traefik.http.middlewares.sched-${PROJECT:-eco}.headers.addvaryheader=true"
    dagster-daemon:
        image: docker.io/nsfearthcube/dagster-${PROJECT:-eco}:${CONTAINER_TAG:-latest}



        secrets:
          - MINIO_ROOT_ACCESS_KEY
          - MINIO_ROOT_SECRET_KEY
        environment: *env

        command: "dagster-daemon run"
        depends_on:
            - dagster-postgres
        networks:
            - dagster_host
    dagster-postgres:
        image: postgres:13.3
        ports:
            - 5432:5432
        environment:
            - POSTGRES_PASSWORD=secret
        volumes:
            - dagster-postgres:/var/lib/postgresql/data
        networks:
           - dagster_host
    headless:
      # image: chromedp/headless-shell:stable
      # stable after 105 causes "devtool: CreateURL: Using unsafe HTTP verb GET to invoke /json/new. This action supports only PUT verb.",
      image: chromedp/headless-shell:105.0.5195.127
      #    build:
  #      context: .
  #      shm_size: "2gb"
      restart: unless-stopped
      shm_size: 1gb
      labels:
        -  "traefik.enable=false"
        - "traefik.backend=headlesschrome"
        - "traefik.port=9222"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.entrypoints=http"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.priority=13"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.rule=Host(`headlesschrome.${HOST? HOST is required}`)"
        - "traefik.http.middlewares.headlesschrome-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}.middlewares=sched-https-redirect"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.entrypoints=https"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.priority=12"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.rule=Host(`headlesschrome.${HOST? HOST is required}`)"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.tls=true"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.tls.certresolver=httpresolver"
        - "traefik.http.routers.headlesschrome-${PROJECT:-eco}-secure.service=headlesschrome-${PROJECT}"
        - "traefik.http.services.sched-${PROJECT:-eco}.loadbalancer.server.port=9222"
        - "traefik.docker.network=traefik_proxy"
      ports:
        - 9222:9222
      environment:
        - SERVICE_PORTS=9222
        # method to get a bigger shm space, since shm_size does not work on a swarm
      tmpfs:
        - /tmp:size=512M
      volumes:
        - type: tmpfs
          target: /dev/shm

      # adding the "bridge" network does not work to give access to the 'gleaner and nabu' containers started
      # by this process. There is no name resolution on that network.
      networks:
        - dagster_host
        - headless
        # in code, use names defined in network above


